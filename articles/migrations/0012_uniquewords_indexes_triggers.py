# Generated by Django 4.2.4 on 2023-08-27 22:10

import django.contrib.postgres.search
from django.contrib.postgres.operations import TrigramExtension
from django.db import migrations, models


def compute_search_vector(apps, schema_editor):
    Article = apps.get_model('articles', 'Article')
    Article.objects.update(
        search_vector=django.contrib.postgres.search.SearchVector(
            'title',
            'text',
            'source_name',
            config='russian',
        ),
    )


class Migration(migrations.Migration):
    dependencies = [
        ('articles', '0011_article_search_vector_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UniqueWords',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('word', models.CharField(unique=True)),
            ],
        ),
        TrigramExtension(),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION update_article_search_vector()
                RETURNS TRIGGER
                LANGUAGE plpgsql AS $$
                BEGIN
                SELECT
                setweight(to_tsvector('russian', coalesce(NEW.title, '')), 'A') ||
                setweight(to_tsvector('russian', coalesce(NEW.source_name, '')), 'B') ||
                setweight(to_tsvector('russian', coalesce(NEW.text, '')), 'C')
                INTO NEW.search_vector;
                RETURN NEW;
                END;
                $$;

                CREATE OR REPLACE TRIGGER article_update_trigger
                BEFORE INSERT OR UPDATE OF title, text, source_name, search_vector
                ON articles_article
                FOR EACH ROW
                EXECUTE PROCEDURE update_article_search_vector();

                UPDATE articles_article SET search_vector = NULL;

                INSERT INTO articles_uniquewords (word) SELECT word
                FROM ts_stat(
                  'SELECT to_tsvector(''simple'', title) FROM articles_article'
                )
                ON CONFLICT (word) DO NOTHING;
                INSERT INTO articles_uniquewords (word) SELECT word
                FROM ts_stat(
                  'SELECT to_tsvector(''simple'', source_name) FROM articles_article'
                )
                ON CONFLICT (word) DO NOTHING;
                INSERT INTO articles_uniquewords (word) SELECT word
                FROM ts_stat(
                  'SELECT to_tsvector(''simple'', text) FROM articles_article'
                )
                ON CONFLICT (word) DO NOTHING;

                CREATE INDEX unique_words_idx ON articles_uniquewords
                  USING GIN (word gin_trgm_ops);
                """,
            reverse_sql="""
                CREATE OR REPLACE FUNCTION update_article_search_vector()
                RETURNS TRIGGER
                LANGUAGE plpgsql AS $$
                BEGIN
                SELECT
                setweight(to_tsvector(coalesce(NEW.title, '')), 'A') ||
                setweight(to_tsvector(coalesce(NEW.text, '')), 'B')
                INTO NEW.search_vector;
                RETURN NEW;
                END;
                $$;

                CREATE OR REPLACE TRIGGER article_update_trigger
                BEFORE INSERT OR UPDATE OF title, text, search_vector
                ON articles_article
                FOR EACH ROW
                EXECUTE PROCEDURE update_article_search_vector();

                DROP INDEX unique_words_idx;
                """,
        ),
        migrations.RunPython(
            compute_search_vector,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
